// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unary.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_unary_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_unary_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_unary_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_unary_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_unary_2eproto;
namespace unary {
class TranslateReply;
class TranslateReplyDefaultTypeInternal;
extern TranslateReplyDefaultTypeInternal _TranslateReply_default_instance_;
class TranslateRequest;
class TranslateRequestDefaultTypeInternal;
extern TranslateRequestDefaultTypeInternal _TranslateRequest_default_instance_;
}  // namespace unary
PROTOBUF_NAMESPACE_OPEN
template<> ::unary::TranslateReply* Arena::CreateMaybeMessage<::unary::TranslateReply>(Arena*);
template<> ::unary::TranslateRequest* Arena::CreateMaybeMessage<::unary::TranslateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace unary {

// ===================================================================

class TranslateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unary.TranslateRequest) */ {
 public:
  inline TranslateRequest() : TranslateRequest(nullptr) {};
  virtual ~TranslateRequest();

  TranslateRequest(const TranslateRequest& from);
  TranslateRequest(TranslateRequest&& from) noexcept
    : TranslateRequest() {
    *this = ::std::move(from);
  }

  inline TranslateRequest& operator=(const TranslateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslateRequest& operator=(TranslateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TranslateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TranslateRequest* internal_default_instance() {
    return reinterpret_cast<const TranslateRequest*>(
               &_TranslateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TranslateRequest& a, TranslateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TranslateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TranslateRequest* New() const final {
    return CreateMaybeMessage<TranslateRequest>(nullptr);
  }

  TranslateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TranslateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TranslateRequest& from);
  void MergeFrom(const TranslateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unary.TranslateRequest";
  }
  protected:
  explicit TranslateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_unary_2eproto);
    return ::descriptor_table_unary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalMsgFieldNumber = 1,
  };
  // string originalMsg = 1;
  void clear_originalmsg();
  const std::string& originalmsg() const;
  void set_originalmsg(const std::string& value);
  void set_originalmsg(std::string&& value);
  void set_originalmsg(const char* value);
  void set_originalmsg(const char* value, size_t size);
  std::string* mutable_originalmsg();
  std::string* release_originalmsg();
  void set_allocated_originalmsg(std::string* originalmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_originalmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_originalmsg(
      std::string* originalmsg);
  private:
  const std::string& _internal_originalmsg() const;
  void _internal_set_originalmsg(const std::string& value);
  std::string* _internal_mutable_originalmsg();
  public:

  // @@protoc_insertion_point(class_scope:unary.TranslateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originalmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_unary_2eproto;
};
// -------------------------------------------------------------------

class TranslateReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:unary.TranslateReply) */ {
 public:
  inline TranslateReply() : TranslateReply(nullptr) {};
  virtual ~TranslateReply();

  TranslateReply(const TranslateReply& from);
  TranslateReply(TranslateReply&& from) noexcept
    : TranslateReply() {
    *this = ::std::move(from);
  }

  inline TranslateReply& operator=(const TranslateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslateReply& operator=(TranslateReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TranslateReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TranslateReply* internal_default_instance() {
    return reinterpret_cast<const TranslateReply*>(
               &_TranslateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TranslateReply& a, TranslateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TranslateReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TranslateReply* New() const final {
    return CreateMaybeMessage<TranslateReply>(nullptr);
  }

  TranslateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TranslateReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TranslateReply& from);
  void MergeFrom(const TranslateReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslateReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "unary.TranslateReply";
  }
  protected:
  explicit TranslateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_unary_2eproto);
    return ::descriptor_table_unary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslatedMsgFieldNumber = 1,
  };
  // string translatedMsg = 1;
  void clear_translatedmsg();
  const std::string& translatedmsg() const;
  void set_translatedmsg(const std::string& value);
  void set_translatedmsg(std::string&& value);
  void set_translatedmsg(const char* value);
  void set_translatedmsg(const char* value, size_t size);
  std::string* mutable_translatedmsg();
  std::string* release_translatedmsg();
  void set_allocated_translatedmsg(std::string* translatedmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_translatedmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_translatedmsg(
      std::string* translatedmsg);
  private:
  const std::string& _internal_translatedmsg() const;
  void _internal_set_translatedmsg(const std::string& value);
  std::string* _internal_mutable_translatedmsg();
  public:

  // @@protoc_insertion_point(class_scope:unary.TranslateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr translatedmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_unary_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TranslateRequest

// string originalMsg = 1;
inline void TranslateRequest::clear_originalmsg() {
  originalmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TranslateRequest::originalmsg() const {
  // @@protoc_insertion_point(field_get:unary.TranslateRequest.originalMsg)
  return _internal_originalmsg();
}
inline void TranslateRequest::set_originalmsg(const std::string& value) {
  _internal_set_originalmsg(value);
  // @@protoc_insertion_point(field_set:unary.TranslateRequest.originalMsg)
}
inline std::string* TranslateRequest::mutable_originalmsg() {
  // @@protoc_insertion_point(field_mutable:unary.TranslateRequest.originalMsg)
  return _internal_mutable_originalmsg();
}
inline const std::string& TranslateRequest::_internal_originalmsg() const {
  return originalmsg_.Get();
}
inline void TranslateRequest::_internal_set_originalmsg(const std::string& value) {
  
  originalmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TranslateRequest::set_originalmsg(std::string&& value) {
  
  originalmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:unary.TranslateRequest.originalMsg)
}
inline void TranslateRequest::set_originalmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  originalmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:unary.TranslateRequest.originalMsg)
}
inline void TranslateRequest::set_originalmsg(const char* value,
    size_t size) {
  
  originalmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:unary.TranslateRequest.originalMsg)
}
inline std::string* TranslateRequest::_internal_mutable_originalmsg() {
  
  return originalmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TranslateRequest::release_originalmsg() {
  // @@protoc_insertion_point(field_release:unary.TranslateRequest.originalMsg)
  return originalmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TranslateRequest::set_allocated_originalmsg(std::string* originalmsg) {
  if (originalmsg != nullptr) {
    
  } else {
    
  }
  originalmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), originalmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:unary.TranslateRequest.originalMsg)
}
inline std::string* TranslateRequest::unsafe_arena_release_originalmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:unary.TranslateRequest.originalMsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return originalmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TranslateRequest::unsafe_arena_set_allocated_originalmsg(
    std::string* originalmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (originalmsg != nullptr) {
    
  } else {
    
  }
  originalmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      originalmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unary.TranslateRequest.originalMsg)
}

// -------------------------------------------------------------------

// TranslateReply

// string translatedMsg = 1;
inline void TranslateReply::clear_translatedmsg() {
  translatedmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TranslateReply::translatedmsg() const {
  // @@protoc_insertion_point(field_get:unary.TranslateReply.translatedMsg)
  return _internal_translatedmsg();
}
inline void TranslateReply::set_translatedmsg(const std::string& value) {
  _internal_set_translatedmsg(value);
  // @@protoc_insertion_point(field_set:unary.TranslateReply.translatedMsg)
}
inline std::string* TranslateReply::mutable_translatedmsg() {
  // @@protoc_insertion_point(field_mutable:unary.TranslateReply.translatedMsg)
  return _internal_mutable_translatedmsg();
}
inline const std::string& TranslateReply::_internal_translatedmsg() const {
  return translatedmsg_.Get();
}
inline void TranslateReply::_internal_set_translatedmsg(const std::string& value) {
  
  translatedmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TranslateReply::set_translatedmsg(std::string&& value) {
  
  translatedmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:unary.TranslateReply.translatedMsg)
}
inline void TranslateReply::set_translatedmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  translatedmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:unary.TranslateReply.translatedMsg)
}
inline void TranslateReply::set_translatedmsg(const char* value,
    size_t size) {
  
  translatedmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:unary.TranslateReply.translatedMsg)
}
inline std::string* TranslateReply::_internal_mutable_translatedmsg() {
  
  return translatedmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TranslateReply::release_translatedmsg() {
  // @@protoc_insertion_point(field_release:unary.TranslateReply.translatedMsg)
  return translatedmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TranslateReply::set_allocated_translatedmsg(std::string* translatedmsg) {
  if (translatedmsg != nullptr) {
    
  } else {
    
  }
  translatedmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), translatedmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:unary.TranslateReply.translatedMsg)
}
inline std::string* TranslateReply::unsafe_arena_release_translatedmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:unary.TranslateReply.translatedMsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return translatedmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TranslateReply::unsafe_arena_set_allocated_translatedmsg(
    std::string* translatedmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (translatedmsg != nullptr) {
    
  } else {
    
  }
  translatedmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      translatedmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unary.TranslateReply.translatedMsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace unary

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_unary_2eproto
